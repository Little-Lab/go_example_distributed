// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userFieldNames          = builder.RawFieldNames(&User{})
	userRows                = strings.Join(userFieldNames, ",")
	userRowsExpectAutoSet   = strings.Join(stringx.Remove(userFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userRowsWithPlaceHolder = strings.Join(stringx.Remove(userFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	userModel interface {
		Insert(ctx context.Context, data *User) (sql.Result, error)
		TranInsert(tx *sql.Tx, data *User) (sql.Result, error)
		TranDelete(tx *sql.Tx, data *User) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*User, error)
		FindOneByEmail(ctx context.Context, email sql.NullString) (*User, error)
		FindOneByCode(ctx context.Context, code sql.NullString) (*User, error)
		Update(ctx context.Context, data *User) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserModel struct {
		conn  sqlx.SqlConn
		table string
	}

	User struct {
		Id             int64          `db:"id"`
		Nickname       string         `db:"nickname"`
		Mobile         sql.NullString `db:"mobile"`
		Email          sql.NullString `db:"email"`
		Password       string         `db:"password"`
		Avatar         sql.NullString `db:"avatar"`
		Birthday       sql.NullTime   `db:"birthday"`      // 生日
		Constellation  string         `db:"constellation"` // 星座
		Sex            int64          `db:"sex"`           // 1:男 2:女
		Location       string         `db:"location"`      // 所在位置
		Privilege      int64          `db:"privilege"`     // 10:普通用户 20:体验用户 30:付费用户 50:点评师 100:点评大佬
		Note           string         `db:"note"`
		Batch          sql.NullTime   `db:"batch"`
		Code           string         `db:"code"`         // 邀请码
		VaildPeroid    time.Time      `db:"vaild_peroid"` // 有效期
		CreatedAt      sql.NullTime   `db:"created_at"`
		UpdatedAt      time.Time      `db:"updated_at"`
		DeletedAt      sql.NullTime   `db:"deleted_at"`
		AlipayNickname string         `db:"alipay_nickname"` // 支付宝名称
	}
)

func newUserModel(conn sqlx.SqlConn) *defaultUserModel {
	return &defaultUserModel{
		conn:  conn,
		table: "`user`",
	}
}

func (m *defaultUserModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserModel) FindOne(ctx context.Context, id int64) (*User, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userRows, m.table)
	var resp User
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) FindOneByEmail(ctx context.Context, email sql.NullString) (*User, error) {
	var resp User
	query := fmt.Sprintf("select %s from %s where `email` = ? limit 1", userRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, email.String)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) FindOneByCode(ctx context.Context, code sql.NullString) (*User, error) {
	var resp User
	query := fmt.Sprintf("select %s from %s where `code` = ? limit 1", userRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, code.String)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) Insert(ctx context.Context, data *User) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, userRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Nickname, data.Mobile, data.Email, data.Password, data.Avatar, data.Birthday, data.Constellation, data.Sex, data.Location, data.Privilege, data.Note, data.Batch, data.Code, data.VaildPeroid, data.DeletedAt, data.AlipayNickname)

	return ret, err
}

func (m *defaultUserModel) TranInsert(tx *sql.Tx, data *User) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, userRowsExpectAutoSet)
	return tx.Exec(query, data.Nickname, data.Mobile, data.Email, data.Password, data.Avatar, data.Birthday, data.Constellation, data.Sex, data.Location, data.Privilege, data.Note, data.Batch, data.Code, data.VaildPeroid, data.DeletedAt, data.AlipayNickname)
}

func (m *defaultUserModel) TranDelete(tx *sql.Tx, data *User) (sql.Result, error) {
	query := fmt.Sprintf("delete from %s where `email` = ?", m.table)
	return tx.Exec(query, data.Email)
}
func (m *defaultUserModel) Update(ctx context.Context, newData *User) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Nickname, newData.Mobile, newData.Email, newData.Password, newData.Avatar, newData.Birthday, newData.Constellation, newData.Sex, newData.Location, newData.Privilege, newData.Note, newData.Batch, newData.Code, newData.VaildPeroid, newData.DeletedAt, newData.AlipayNickname, newData.Id)
	return err
}

func (m *defaultUserModel) tableName() string {
	return m.table
}
