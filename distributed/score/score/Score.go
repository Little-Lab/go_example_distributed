// Code generated by goctl. DO NOT EDIT.
// Source: scores.proto

package score

import (
	"context"

	"score/pb/scores"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddScoreReq      = scores.AddScoreReq
	AddScoreResp     = scores.AddScoreResp
	DelScoreReq      = scores.DelScoreReq
	DelScoreResp     = scores.DelScoreResp
	GetScoreByIdReq  = scores.GetScoreByIdReq
	GetScoreByIdResp = scores.GetScoreByIdResp
	Score            = scores.Score
	SearchScoreReq   = scores.SearchScoreReq
	SearchScoreResp  = scores.SearchScoreResp
	UpdateScoreReq   = scores.UpdateScoreReq
	UpdateScoreResp  = scores.UpdateScoreResp

	ScoreZrpcClient interface {
		// -----------------------score-----------------------
		AddScore(ctx context.Context, in *AddScoreReq, opts ...grpc.CallOption) (*AddScoreResp, error)
		TranIncScore(ctx context.Context, in *AddScoreReq, opts ...grpc.CallOption) (*AddScoreResp, error)
		TranDecScore(ctx context.Context, in *AddScoreReq, opts ...grpc.CallOption) (*AddScoreResp, error)
		UpdateScore(ctx context.Context, in *UpdateScoreReq, opts ...grpc.CallOption) (*UpdateScoreResp, error)
		DelScore(ctx context.Context, in *DelScoreReq, opts ...grpc.CallOption) (*DelScoreResp, error)
		GetScoreById(ctx context.Context, in *GetScoreByIdReq, opts ...grpc.CallOption) (*GetScoreByIdResp, error)
		SearchScore(ctx context.Context, in *SearchScoreReq, opts ...grpc.CallOption) (*SearchScoreResp, error)
	}

	defaultScoreZrpcClient struct {
		cli zrpc.Client
	}
)

func NewScoreZrpcClient(cli zrpc.Client) ScoreZrpcClient {
	return &defaultScoreZrpcClient{
		cli: cli,
	}
}

// -----------------------score-----------------------
func (m *defaultScoreZrpcClient) AddScore(ctx context.Context, in *AddScoreReq, opts ...grpc.CallOption) (*AddScoreResp, error) {
	client := scores.NewScoreClient(m.cli.Conn())
	return client.AddScore(ctx, in, opts...)
}

func (m *defaultScoreZrpcClient) TranIncScore(ctx context.Context, in *AddScoreReq, opts ...grpc.CallOption) (*AddScoreResp, error) {
	client := scores.NewScoreClient(m.cli.Conn())
	return client.TranIncScore(ctx, in, opts...)
}

func (m *defaultScoreZrpcClient) TranDecScore(ctx context.Context, in *AddScoreReq, opts ...grpc.CallOption) (*AddScoreResp, error) {
	client := scores.NewScoreClient(m.cli.Conn())
	return client.TranDecScore(ctx, in, opts...)
}

func (m *defaultScoreZrpcClient) UpdateScore(ctx context.Context, in *UpdateScoreReq, opts ...grpc.CallOption) (*UpdateScoreResp, error) {
	client := scores.NewScoreClient(m.cli.Conn())
	return client.UpdateScore(ctx, in, opts...)
}

func (m *defaultScoreZrpcClient) DelScore(ctx context.Context, in *DelScoreReq, opts ...grpc.CallOption) (*DelScoreResp, error) {
	client := scores.NewScoreClient(m.cli.Conn())
	return client.DelScore(ctx, in, opts...)
}

func (m *defaultScoreZrpcClient) GetScoreById(ctx context.Context, in *GetScoreByIdReq, opts ...grpc.CallOption) (*GetScoreByIdResp, error) {
	client := scores.NewScoreClient(m.cli.Conn())
	return client.GetScoreById(ctx, in, opts...)
}

func (m *defaultScoreZrpcClient) SearchScore(ctx context.Context, in *SearchScoreReq, opts ...grpc.CallOption) (*SearchScoreResp, error) {
	client := scores.NewScoreClient(m.cli.Conn())
	return client.SearchScore(ctx, in, opts...)
}
