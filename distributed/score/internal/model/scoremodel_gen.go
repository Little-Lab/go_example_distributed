// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	scoreFieldNames          = builder.RawFieldNames(&Score{})
	scoreRows                = strings.Join(scoreFieldNames, ",")
	scoreTranUpdateRows      = strings.Join(stringx.Remove(scoreFieldNames, "`id`", "`user_id`"), "=?,") + "=?"
	scoreRowsExpectAutoSet   = strings.Join(stringx.Remove(scoreFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	scoreRowsWithPlaceHolder = strings.Join(stringx.Remove(scoreFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	scoreModel interface {
		Insert(ctx context.Context, data *Score) (sql.Result, error)
		TranInsert(tx *sql.Tx, data *Score) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Score, error)
		FindByUserId(ctx context.Context, userId int64) (*Score, error)
		Update(ctx context.Context, data *Score) error
		TranUpdate(tx *sql.Tx, data *Score) (sql.Result, error)
		Delete(ctx context.Context, id int64) error
	}

	defaultScoreModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Score struct {
		Id     int64 `db:"id"`
		UserId int64 `db:"user_id"`
		Score  int64 `db:"score"`
	}
)

func newScoreModel(conn sqlx.SqlConn) *defaultScoreModel {
	return &defaultScoreModel{
		conn:  conn,
		table: "`score`",
	}
}

func (m *defaultScoreModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultScoreModel) FindOne(ctx context.Context, id int64) (*Score, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", scoreRows, m.table)
	var resp Score
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultScoreModel) FindByUserId(ctx context.Context, id int64) (*Score, error) {
	query := fmt.Sprintf("select %s from %s where `user_id` = ? limit 1", scoreRows, m.table)
	var resp Score
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		fmt.Println("---------------->1")
		return &resp, nil
	case sqlc.ErrNotFound:
		fmt.Println("-----------------2")
		return nil, ErrNotFound
	default:
		fmt.Println("-----------------3")
		return nil, err
	}
}

func (m *defaultScoreModel) Insert(ctx context.Context, data *Score) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, scoreRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.Score)
	return ret, err
}

func (m *defaultScoreModel) TranInsert(tx *sql.Tx, data *Score) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, scoreRowsExpectAutoSet)
	return tx.Exec(query, data.UserId, data.Score)
}

func (m *defaultScoreModel) Update(ctx context.Context, data *Score) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, scoreRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.Score, data.Id)
	return err
}

func (m *defaultScoreModel) TranUpdate(tx *sql.Tx, data *Score) (sql.Result, error) {
	query := fmt.Sprintf("update %s set %s where `user_id` = ?", m.table, scoreTranUpdateRows)
	res, err := tx.Exec(query, data.Score, data.UserId)
	fmt.Println("-------->score update:", query, ">>>>", data.Score, ">>>>", data.UserId)
	return res, err
}

func (m *defaultScoreModel) tableName() string {
	return m.table
}
