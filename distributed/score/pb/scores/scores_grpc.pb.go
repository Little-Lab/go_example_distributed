// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: scores.proto

package scores

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Score_AddScore_FullMethodName     = "/scores.score/AddScore"
	Score_TranIncScore_FullMethodName = "/scores.score/TranIncScore"
	Score_TranDecScore_FullMethodName = "/scores.score/TranDecScore"
	Score_UpdateScore_FullMethodName  = "/scores.score/UpdateScore"
	Score_DelScore_FullMethodName     = "/scores.score/DelScore"
	Score_GetScoreById_FullMethodName = "/scores.score/GetScoreById"
	Score_SearchScore_FullMethodName  = "/scores.score/SearchScore"
)

// ScoreClient is the client API for Score service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScoreClient interface {
	// -----------------------score-----------------------
	AddScore(ctx context.Context, in *AddScoreReq, opts ...grpc.CallOption) (*AddScoreResp, error)
	TranIncScore(ctx context.Context, in *AddScoreReq, opts ...grpc.CallOption) (*AddScoreResp, error)
	TranDecScore(ctx context.Context, in *AddScoreReq, opts ...grpc.CallOption) (*AddScoreResp, error)
	UpdateScore(ctx context.Context, in *UpdateScoreReq, opts ...grpc.CallOption) (*UpdateScoreResp, error)
	DelScore(ctx context.Context, in *DelScoreReq, opts ...grpc.CallOption) (*DelScoreResp, error)
	GetScoreById(ctx context.Context, in *GetScoreByIdReq, opts ...grpc.CallOption) (*GetScoreByIdResp, error)
	SearchScore(ctx context.Context, in *SearchScoreReq, opts ...grpc.CallOption) (*SearchScoreResp, error)
}

type scoreClient struct {
	cc grpc.ClientConnInterface
}

func NewScoreClient(cc grpc.ClientConnInterface) ScoreClient {
	return &scoreClient{cc}
}

func (c *scoreClient) AddScore(ctx context.Context, in *AddScoreReq, opts ...grpc.CallOption) (*AddScoreResp, error) {
	out := new(AddScoreResp)
	err := c.cc.Invoke(ctx, Score_AddScore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoreClient) TranIncScore(ctx context.Context, in *AddScoreReq, opts ...grpc.CallOption) (*AddScoreResp, error) {
	out := new(AddScoreResp)
	err := c.cc.Invoke(ctx, Score_TranIncScore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoreClient) TranDecScore(ctx context.Context, in *AddScoreReq, opts ...grpc.CallOption) (*AddScoreResp, error) {
	out := new(AddScoreResp)
	err := c.cc.Invoke(ctx, Score_TranDecScore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoreClient) UpdateScore(ctx context.Context, in *UpdateScoreReq, opts ...grpc.CallOption) (*UpdateScoreResp, error) {
	out := new(UpdateScoreResp)
	err := c.cc.Invoke(ctx, Score_UpdateScore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoreClient) DelScore(ctx context.Context, in *DelScoreReq, opts ...grpc.CallOption) (*DelScoreResp, error) {
	out := new(DelScoreResp)
	err := c.cc.Invoke(ctx, Score_DelScore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoreClient) GetScoreById(ctx context.Context, in *GetScoreByIdReq, opts ...grpc.CallOption) (*GetScoreByIdResp, error) {
	out := new(GetScoreByIdResp)
	err := c.cc.Invoke(ctx, Score_GetScoreById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoreClient) SearchScore(ctx context.Context, in *SearchScoreReq, opts ...grpc.CallOption) (*SearchScoreResp, error) {
	out := new(SearchScoreResp)
	err := c.cc.Invoke(ctx, Score_SearchScore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScoreServer is the server API for Score service.
// All implementations must embed UnimplementedScoreServer
// for forward compatibility
type ScoreServer interface {
	// -----------------------score-----------------------
	AddScore(context.Context, *AddScoreReq) (*AddScoreResp, error)
	TranIncScore(context.Context, *AddScoreReq) (*AddScoreResp, error)
	TranDecScore(context.Context, *AddScoreReq) (*AddScoreResp, error)
	UpdateScore(context.Context, *UpdateScoreReq) (*UpdateScoreResp, error)
	DelScore(context.Context, *DelScoreReq) (*DelScoreResp, error)
	GetScoreById(context.Context, *GetScoreByIdReq) (*GetScoreByIdResp, error)
	SearchScore(context.Context, *SearchScoreReq) (*SearchScoreResp, error)
	mustEmbedUnimplementedScoreServer()
}

// UnimplementedScoreServer must be embedded to have forward compatible implementations.
type UnimplementedScoreServer struct {
}

func (UnimplementedScoreServer) AddScore(context.Context, *AddScoreReq) (*AddScoreResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddScore not implemented")
}
func (UnimplementedScoreServer) TranIncScore(context.Context, *AddScoreReq) (*AddScoreResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TranIncScore not implemented")
}
func (UnimplementedScoreServer) TranDecScore(context.Context, *AddScoreReq) (*AddScoreResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TranDecScore not implemented")
}
func (UnimplementedScoreServer) UpdateScore(context.Context, *UpdateScoreReq) (*UpdateScoreResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScore not implemented")
}
func (UnimplementedScoreServer) DelScore(context.Context, *DelScoreReq) (*DelScoreResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelScore not implemented")
}
func (UnimplementedScoreServer) GetScoreById(context.Context, *GetScoreByIdReq) (*GetScoreByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScoreById not implemented")
}
func (UnimplementedScoreServer) SearchScore(context.Context, *SearchScoreReq) (*SearchScoreResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchScore not implemented")
}
func (UnimplementedScoreServer) mustEmbedUnimplementedScoreServer() {}

// UnsafeScoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScoreServer will
// result in compilation errors.
type UnsafeScoreServer interface {
	mustEmbedUnimplementedScoreServer()
}

func RegisterScoreServer(s grpc.ServiceRegistrar, srv ScoreServer) {
	s.RegisterService(&Score_ServiceDesc, srv)
}

func _Score_AddScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddScoreReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoreServer).AddScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Score_AddScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoreServer).AddScore(ctx, req.(*AddScoreReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Score_TranIncScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddScoreReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoreServer).TranIncScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Score_TranIncScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoreServer).TranIncScore(ctx, req.(*AddScoreReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Score_TranDecScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddScoreReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoreServer).TranDecScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Score_TranDecScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoreServer).TranDecScore(ctx, req.(*AddScoreReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Score_UpdateScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateScoreReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoreServer).UpdateScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Score_UpdateScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoreServer).UpdateScore(ctx, req.(*UpdateScoreReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Score_DelScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelScoreReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoreServer).DelScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Score_DelScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoreServer).DelScore(ctx, req.(*DelScoreReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Score_GetScoreById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScoreByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoreServer).GetScoreById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Score_GetScoreById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoreServer).GetScoreById(ctx, req.(*GetScoreByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Score_SearchScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchScoreReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoreServer).SearchScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Score_SearchScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoreServer).SearchScore(ctx, req.(*SearchScoreReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Score_ServiceDesc is the grpc.ServiceDesc for Score service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Score_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scores.score",
	HandlerType: (*ScoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddScore",
			Handler:    _Score_AddScore_Handler,
		},
		{
			MethodName: "TranIncScore",
			Handler:    _Score_TranIncScore_Handler,
		},
		{
			MethodName: "TranDecScore",
			Handler:    _Score_TranDecScore_Handler,
		},
		{
			MethodName: "UpdateScore",
			Handler:    _Score_UpdateScore_Handler,
		},
		{
			MethodName: "DelScore",
			Handler:    _Score_DelScore_Handler,
		},
		{
			MethodName: "GetScoreById",
			Handler:    _Score_GetScoreById_Handler,
		},
		{
			MethodName: "SearchScore",
			Handler:    _Score_SearchScore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scores.proto",
}
